{"version":3,"sources":["index.js"],"names":["MyTextInput","_ref","label","props","Object","D_Download_D_formik_v2_tutorial_final_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__","_useField","useField","_useField2","D_Download_D_formik_v2_tutorial_final_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","field","meta","c","useFormikContext","useEffect","setFieldValue","console","log","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","Fragment","htmlFor","id","name","assign","className","touched","error","MyCheckbox","_ref2","children","_useField3","D_Download_D_formik_v2_tutorial_final_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__","type","_useField4","StyledSelect","styled","select","_templateObject","StyledErrorMessage","div","_templateObject2","StyledLabel","_templateObject3","MySelect","_ref3","_useField5","_useField6","SignupForm","formik__WEBPACK_IMPORTED_MODULE_6__","initialValues","firstName","lastName","email","acceptedTerms","jobType","validationSchema","Yup","max","required","oneOf","onSubmit","values","_ref4","setSubmitting","setTimeout","alert","JSON","stringify","placeholder","value","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.44917ecd.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Formik, Form, useField, useFormikContext } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"@emotion/styled\";\nimport \"./styles.css\";\nimport \"./styles-custom.css\";\n\nconst MyTextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  const c = useFormikContext();\n  useEffect(() => {\n    if (c !== \"lol\") {\n      c.setFieldValue(\"lol\");\n    }\n  }, [c]);\n  console.log(c);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst MyCheckbox = ({ children, ...props }) => {\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\n  return (\n    <>\n      <label className=\"checkbox\">\n        <input {...field} {...props} type=\"checkbox\" />\n        {children}\n      </label>\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\n// Styled components ....\nconst StyledSelect = styled.select`\n  color: var(--blue);\n`;\n\nconst StyledErrorMessage = styled.div`\n  font-size: 12px;\n  color: var(--red-600);\n  width: 400px;\n  margin-top: 0.25rem;\n  &:before {\n    content: \"❌ \";\n    font-size: 10px;\n  }\n  @media (prefers-color-scheme: dark) {\n    color: var(--red-300);\n  }\n`;\n\nconst StyledLabel = styled.label`\n  margin-top: 1rem;\n`;\n\nconst MySelect = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\n      <StyledSelect {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <StyledErrorMessage>{meta.error}</StyledErrorMessage>\n      ) : null}\n    </>\n  );\n};\n\n// And now we can use these\nconst SignupForm = () => {\n  return (\n    <>\n      <h1>Subscribe!</h1>\n      <Formik\n        initialValues={{\n          firstName: \"\",\n          lastName: \"\",\n          email: \"\",\n          acceptedTerms: false, // added for our checkbox\n          jobType: \"\" // added for our select\n        }}\n        validationSchema={Yup.object({\n          firstName: Yup.string()\n            .max(15, \"Must be 15 characters or less\")\n            .required(\"Required\"),\n          lastName: Yup.string()\n            .max(20, \"Must be 20 characters or less\")\n            .required(\"Required\"),\n          email: Yup.string()\n            .email(\"Invalid email addresss`\")\n            .required(\"Required\"),\n          acceptedTerms: Yup.boolean()\n            .required(\"Required\")\n            .oneOf([true], \"You must accept the terms and conditions.\"),\n          jobType: Yup.string()\n            // specify the set of valid values for job type\n            // @see http://bit.ly/yup-mixed-oneOf\n            .oneOf(\n              [\"designer\", \"development\", \"product\", \"other\"],\n              \"Invalid Job Type\"\n            )\n            .required(\"Required\")\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        <Form>\n          <MyTextInput\n            label=\"First Name\"\n            name=\"firstName\"\n            type=\"text\"\n            placeholder=\"Jane\"\n          />\n          <MyTextInput\n            label=\"Last Name\"\n            name=\"lastName\"\n            type=\"text\"\n            placeholder=\"Doe\"\n          />\n          <MyTextInput\n            label=\"Email Address\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"jane@formik.com\"\n          />\n          <MySelect label=\"Job Type\" name=\"jobType\">\n            <option value=\"\">Select a job type</option>\n            <option value=\"designer\">Designer</option>\n            <option value=\"development\">Developer</option>\n            <option value=\"product\">Product Manager</option>\n            <option value=\"other\">Other</option>\n          </MySelect>\n          <MyCheckbox name=\"acceptedTerms\">\n            I accept the terms and conditions\n          </MyCheckbox>\n\n          <button type=\"submit\">Submit</button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\nfunction App() {\n  return <SignupForm />;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}